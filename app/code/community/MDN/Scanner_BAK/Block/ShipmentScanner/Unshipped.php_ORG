<?php

class MDN_Scanner_Block_ShipmentScanner_Unshipped extends Mage_Adminhtml_Block_Widget_Form {

	private $_orders = array();
	private $_items = array();
	private $_products = array();
	private $_unshippedProductIds = array();
	private $_serials = array();
	
	public function getOrders() {
		$orders = $this->getUnshippedOrders();
		foreach($orders as $orderId => $order) {
			$this->_orders[$orderId] = $order->getData();
			$items = $this->getOrderItems($order);
			foreach($items as $itemId => $item) {
				$this->_orders[$orderId]['items'][$item->getData('item_id')] = $item->getData();
				$this->_items[$item->getData('item_id')] = $item->getData();
				// TODO: do we need to select Magento product info?
				//$this->_products[$item->getData('product_id')] = $item->getData();
				$this->_products[$item->getData('product_id')] = array(
					'product_id' => $item->getData('product_id'), 
					'name' => $item->getData('name'), 
					'sku' => $item->getData('sku'), 
					'product_type' => $item->getData('product_type'), 
					'store_id' => $item->getData('store_id'), 
					'weight' => $item->getData('weight'), 
				);
			}
		}
		
		return $this->_orders;
	}
	
	public function getOrderItems($order = null) {
		if($order instanceof MDN_AdvancedStock_Model_Sales_Order) {
			if(isset($this->_orders[$order->getData('entity_id')]['items'])) {
				return $this->_orders[$order->getData('entity_id')]['items'];
			}
			return $order->getItemsCollection();
		}
		
		return $this->_items;
	}
	
	public function getProducts() {
		return $this->_products;
	}
	
	public function getSerials() {
		if(empty($this->_serials)) {
			$serialColl = Mage::getModel('barcodes/barcodes')
				->getCollection()
				->addFieldToFilter('product_id', array('in' => array_keys($this->_products)))
				->load();
			foreach ($serialColl as $serialId => $serial) {
				$productId = $serial->getData('product_id');
				$dzv_serial = $serial->getData('dzv_serial');
				$location = $serial->getData('location');

				if ($dzv_serial) {
					$this->_serials[$dzv_serial]['product_id'] = $serial->getProductId();
					$this->_serials[$dzv_serial]['location'] = $serial->getLocation();
				}
			}
		}
		
		return $this->_serials;
	}
	
	public function getInfo() {
		//echo "running getInfo...<br>\n";
		$productLoc = array();
		$finalInfoArr = array();
		$unshippedItems = $this->getUnshippedItems();
		//echo "unshipped items count: ".count($unshippedItems)."<br>\n";
		$product_ids = array_unique($this->_unshippedProductIds);
		//echo "<pre>product ids: " . print_r($product_ids, true) . "</pre>\n";
		if (!empty($product_ids)) {
			$serialColl = Mage::getModel('barcodes/barcodes')
				->getCollection()
				->addFieldToFilter('product_id', array('in' => $product_ids))
				->load();
			foreach ($serialColl as $serial) {
				$productId = $serial->getData('product_id');
				$dzv_serial = $serial->getData('dzv_serial');
				$location = $serial->getData('location');

				if ($dzv_serial) {
					$unshippedItems[$productId]['serials'][] = $dzv_serial;
					$unshippedItems[$productId]['locations'][] = $location;
				}
			}
		}

		return $unshippedItems;
	}

	/**
	 * @return array(
	 * 		order_id => 'Unshipped sales Order Id',
	 * 		item_id => 'Unshipped Sales Order item Id',
	 * 		sku => 'Unshipped Product SKU',
	 * 		name => 'Unshipped Product Name',
	 * 		product_id => 'Unshipped Product Id'
	 * 	)
	 */
	public function getUnshippedItems() {
		//echo "running getUnshippedItems...<br>\n";
		// fetch Selected Orders (ERP > Orders > Order Preparation) that have not shipped
		$orders = $this->getUnshippedOrders();
		//echo "orders class ".get_class($order)." count: ".count($orders) . "<br>\n";
		$unshippedItems = array();
		foreach ($orders as $index => $order) {
			//echo "order data:<pre>".print_r($order->getData(), true)."</pre>\n";
			// don't know why we need shipments
			//$shipments = $order->getShipmentsCollection();
			//echo "shipments count: ".count($shipments)."<br>\n";
			//foreach ($shipments as $shipment) {
				//echo "<pre>shipment:".print_r($shipment->getData(), true)."</pre>\n";
			//}
			$items = $order->getItemsCollection();
			//echo "order items class ".get_class($items)." count: ".count($items)."<br>\n";
			foreach ($items as $index => $order) {
				//echo "<pre>order item $index: ".print_r($order->getData(), true)."</pre>\n";
				$productId = $order->getData('product_id');
				$qty_ordered = $order->getData('qty_ordered');
				$qty_shipped = $order->getData('qty_shipped');
				if ($qty_shipped < $qty_ordered) {
					//echo "quantity shipped is less than quantity ordered<br>\n";
					$unshippedItems[$productId]['order_id'] = $order->getData('order_id');
					$unshippedItems[$productId]['item_id'] = $order->getData('item_id');
					$unshippedItems[$productId]['sku'] = $order->getData('sku');
					$unshippedItems[$productId]['name'] = $order->getData('name');
					$unshippedItems[$productId]['product_id'] = $order->getData('product_id');
					$unshippedItems[$productId]['serials'] = array();
					if (!in_array($order->getData('product_id'), $this->_unshippedProductIds)) {
						$this->_unshippedProductIds[$productId] = $order->getData('product_id');
					}
				}
				//echo "<pre>unshipped item $productId: ".print_r($unshippedItems, true)."</pre>\n";
			}
		}

		return $unshippedItems;
	}

	/**
	 * @return object Mage_Sales_Model_Resource_Order_Collection
	 *
	 */
	public function getUnshippedOrders() {
		//echo "running getUnshippedOrders...<br>\n";
		return Mage::getModel('sales/order')->getCollection()
			->addFieldToFilter('status', array('nin' => array('complete', 'closed', 'canceled')))
			->setOrder('entity_id')
		;
	}

	public function saveShippedItems() {
		$post = $this->getRequest()->getPost();
		
		// EXAMPLE POST
		$post = array(
			'selected_order' => '123456',
			'selected_order_type' => 'magento',
			'product_serials' => 'serial1,serial2,serial3'
		);
		
		// TODO: select order with items
		
		// TODO: select Rvtech serial records
		
		// TODO: for each serial of product that is an order item, increment the item quantity shipped by 1
		// REFERENCE: look up any order > Preparation tab for code on how items are marked shipped
		
		// TODO: for each serial that was shipped, mark its location as the Magento order
	}
}
